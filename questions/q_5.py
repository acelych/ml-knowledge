'''
历史的窗口搜索

传统TF－IDF方法对突发新闻的敏感度不足，为提高热点词识别效果，某新闻热点追踪平台提出基于历史窗口的TF－IDF方法，具体地，
在某个时间点t提出一个查询α时，系统不应该在整个历史文档库中进行大海捞针式的搜索。

相反，它需要智能地聚焦于查询发生时间点t前的一段“历史时间窗口”内的文档，并且只需考虑这个窗口内最新的信息。

您的任务就是实现这个“历史窗口”检索引擎的核心逻辑。

历史窗口：
仅计算从查询时间点t开始之前的K篇文档的词频，而非全部历史文档。

动态权重
为了使该搜索模型更关注短期趋势，窗口内越新（文档编号m越大）的文档权重越高，窗口内第j篇文档的权重为(K-+1)/K
(最新文档权重=1，最旧文档权重=1/K）。

筛选与输出
计算查询内容与窗口内每一篇文档向量之间的余弦相似度（CosineSimilarity），
返回本次查询中余弦相似度>=0.6且余弦相似度最高的文档编号m，若未找到满足条件的文档编号（余弦相似度<0.6），
则本次查询返回-1；若存在多个相同最高相似度的文档，返回时间窗口中最早的的一篇文档编号。

相似度计算方法
查询4向量（向量A）的第i维计算公式为，qi=TF(wi,q)×IDF(wi)，其中TF(wi,q)表示词w在所有查询内容query中的词频，
IDF(wi)表示词w在窗口文档集合中的中逆文档频率。窗口文档集合中第n篇文档（向量B）的第维向量计算公式为：
d; =TF(wi, doc)× IDF(wi) × weightn
, 其中TF(w;,doc)表示词wi在查询窗口文档集合中的词频，IDF(wi)表示词w在窗口文档中的中逆文档频率，weightn表示第n篇文档的动态权重。

提示：向量A、B的余弦相似度:
cos(A, B)= AIIBI
A·B

输入描述
输入第一行表示文档集合corpus总数N
第二行开始每一行为从时间点0开始的文档，时间点和文档编号按行递增（注：文档编号、查询时间点均可理解为数组下标，下标从0开始)
之后的一行为查询窗口的大小K
接下来的下一行表示总查询次数P
然后紧跟每个查询，格式为搜索时间点t具体查询内容α，t和q中间用空格隔开

参数限制
1. 1 <= K <= 文档总数N
2. 0 < 文档总数N <= 100
3. 0 < 总查询次数P <= 100

在处理完基本题目的I/O操作后，你可能需实现的函数原型是historysearch(corpus, K,query)，参数说明如下:
1. corpus：从时间点o开始的文档集合，
corpus[]表示第i篇文档，文档编号m和时
间点t均对应数组下标，下标从0开始。
2. K：窗口大小。
3. query：查询列表。每个查询是一个二元组（查询时间点t，查询内容q）。

输出描述
输出空格分隔的最匹配的文档编号m，文档编号和查询顺序一一对应，若两篇文档最高相似度相同，则返回窗口中最早的文档编号
若无匹配则对应位置返回-1
'''

N = int(input().split())

